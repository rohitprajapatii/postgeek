services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      # This helps the service detect it's running in Docker
      - DOCKER_ENV=true
    # Use bridge networking for better container isolation
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Frontend runs in bridge mode since it doesn't need database access
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend
    ports:
      - "8081:80"
    depends_on:
      - backend
    environment:
      - NGINX_PORT=80
      - BACKEND_URL=http://backend:3000
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:80",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  # Additional network for complex Docker database scenarios
  postgres_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
